<?php


/**
 * Edit the environment form to connect to acquia search
 *
 * Implements hook_form_FORM_ID_alter().
 *
 * @param type $form
 * @param type $form_state
 */
function acquia_search_multi_subs_form_apachesolr_environment_edit_form_alter(&$form, $form_state) {
  // Gets environment from form, gets connection status to Acquia Search.
  $env_id = isset($form['env_id']['#default_value']) ? $form['env_id']['#default_value'] : '';
  $environment = ($env_id) ? apachesolr_environment_load($env_id) : FALSE;
  $search_cores = array();

  if ($form['service_class']['#value'] == 'AcquiaSearchService') {

    // Define the override form
    $form['acquia_override_subscription'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configure Acquia Search'),
      '#description' => t('This is usually not necessary unless you really want this
        search environment to connect to a different Acquia search subscription.
        by default it uses your subscription that was configured in the !acquiaagent.', array('!acquiaagent' => l('Acquia Agent','admin/config/system/acquia-agent'))),
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
      '#prefix' => '<div id="acquia-override-subscription-data-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 11,
    );

    // Add a form element to make it easier to choose from your multiple cores
    $options = array('other' => t('Other'));
    $search_cores = acquia_search_multi_subs_get_search_cores();
    if (is_array($search_cores)) {
      foreach ($search_cores as $search_core) {
        $options[$search_core['core_id']] = $search_core['core_id'];
      }
    }

    // Show a warning if there are not enough cores available to make the auto
    // switch possible
    if (count($options) <= 2) {
      drupal_set_message('It seems you only have 1 Acquia Search index. To find out if you are eligible for a search core per environment it is recommended you open a support ticket with Acquia.', 'warning');
    }

    // Check if we have the auto switch set
    $acquia_search_auto_switch = isset($environment['conf']['acquia_override_auto_switch']) ? $environment['conf']['acquia_override_auto_switch'] : TRUE;
    // Add a checkbox to auto switch per environment
    $form['acquia_override_subscription']['acquia_override_auto_switch'] = array(
      '#type' => 'checkbox',
      '#title' => 'Automatically switch when an Acquia Environment is detected',
      '#description' => t('Based on the detection of the AH_SITE_NAME & AH_SITE_ENVIRONMENT header we can detect which environment you are currently using and switch the Acquia Search Core automatically if there is a corresponding core.'),
      '#default_value' => $acquia_search_auto_switch,
    );

    // Add the ajax callback and wrapper
    $form['acquia_override_subscription']['acquia_override_selector'] = array(
      '#type' => 'select',
      '#title' => t('Acquia Search Core'),
      '#options' => $options,
      '#default_value' => isset($environment['conf']['acquia_override_selector']) ? $environment['conf']['acquia_override_selector'] : '',
      '#description' => t('Choose any of the available search cores or manually define one by choosing other.'),
      '#ajax' => array(
        'callback' => 'acquia_override_subscription_data',
        'wrapper' => 'acquia-override-subscription-data-wrapper',
      ),
      '#states' => array(
        'visible' => array(   // action to take.
          ':input[name="acquia_override_auto_switch"]' => array('checked' => FALSE),
        ),
      ),
    );

    $acquia_identifier = variable_get('acquia_identifier');
    $acquia_key = variable_get('acquia_key');
    $acquia_search_core = '';

    // Check if we chose a different search core
    if (isset($form_state['values']['acquia_override_selector'])) {
      if (is_array($search_cores)) {
        foreach ($search_cores as $search_core) {
          if ($search_core['core_id'] == $form_state['values']['acquia_override_selector']) {
            $acquia_search_core = $search_core['core_id'];
            break;
          }
        }
      }
    }

    // Generate our custom form
    $default_acquia_id = !empty($environment['conf']['acquia_override_subscription_id']) ? $environment['conf']['acquia_override_subscription_id'] : $acquia_identifier;
    $form['acquia_override_subscription']['acquia_override_subscription_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter your Acquia Subscription Identifier'),
      '#description' => t('Prefilled with the identifier of the Acquia Connector. You can find your details in Acquia Insight.'),
      '#default_value' => $default_acquia_id,
      '#states' => array(
        'visible' => array(   // action to take.
          ':input[name="acquia_override_selector"]' => array('value' => 'other'),
          ':input[name="acquia_override_auto_switch"]' => array('checked' => FALSE),
        ),
      ),
    );

    $default_acquia_key = !empty($environment['conf']['acquia_override_subscription_key']) ? $environment['conf']['acquia_override_subscription_key'] : $acquia_key;
    $form['acquia_override_subscription']['acquia_override_subscription_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Enter your Acquia Subscription key'),
      '#description' => t('Prefilled with the key of the Acquia Connector. You can find your details in Acquia Insight.'),
      '#default_value' => $default_acquia_key,
      '#states' => array(
        'visible' => array(   // action to take.
          ':input[name="acquia_override_selector"]' => array('value' => 'other'),
          ':input[name="acquia_override_auto_switch"]' => array('checked' => FALSE),
        ),
      ),
    );

    // @Todo : Figure out why the heck it does not reload with the new default values...
    $default_acquia_core_name = !empty($environment['conf']['acquia_override_subscription_corename']) ? $environment['conf']['acquia_override_subscription_corename'] : $acquia_search_core;
    $form['acquia_override_subscription']['acquia_override_subscription_corename'] = array(
      '#type' => 'textfield',
      '#description' => t('Please enter the name of the Acquia Search core you want to connect to that belongs to the above identifier and key. In most cases you would want to use the dropdown list to get the correct value.'),
      '#title' => t('Enter your Acquia Search Core Name'),
      '#default_value' => $default_acquia_core_name,
      '#states' => array(
        'visible' => array(   // action to take.
          ':input[name="acquia_override_selector"]' => array('value' => 'other'),
          ':input[name="acquia_override_auto_switch"]' => array('checked' => FALSE),
        ),
      ),
    );

    // Make sure if we select a value from our dropdown list of cores, that they are not alterable as we need to use
    // #value because the #ajax property is silly.
    $not_other = (isset($environment['conf']['acquia_override_selector']) && $environment['conf']['acquia_override_selector'] !== 'other');
    $ajax_not_other = (isset($form_state['values']['acquia_override_selector']) && $form_state['values']['acquia_override_selector'] !== 'other');
    if ((!empty($form_state['values']) && $ajax_not_other) || empty($form_state['values']) && $not_other) {
      $form['acquia_override_subscription']['acquia_override_subscription_id']['#value'] = $acquia_identifier;
      $form['acquia_override_subscription']['acquia_override_subscription_id']['#disabled'] = true;
      $form['acquia_override_subscription']['acquia_override_subscription_key']['#value'] = $acquia_key;
      $form['acquia_override_subscription']['acquia_override_subscription_key']['#disabled'] = true;
      $form['acquia_override_subscription']['acquia_override_subscription_corename']['#value'] = $acquia_search_core;
      $form['acquia_override_subscription']['acquia_override_subscription_corename']['#disabled'] = true;
    }

    array_unshift($form['actions']['save']['#validate'], 'acquia_search_multi_subs_environment_edit_form_validate');
    array_unshift($form['actions']['save']['#submit'], 'acquia_search_multi_subs_environment_edit_form_submit');
    array_unshift($form['actions']['save_edit']['#validate'], 'acquia_search_multi_subs_environment_edit_form_validate');
    array_unshift($form['actions']['save_edit']['#submit'], 'acquia_search_multi_subs_environment_edit_form_submit');
  }
}

/**
 * Ajax callback to get a more selective farm list based on the colony
 *
 * @param type $form
 * @param type $form_state
 * @return type
 */
function acquia_override_subscription_data($form, &$form_state) {
  return $form['acquia_override_subscription'];
}

/**
 * Validate if the values given are correct
 * @param type $form
 * @param type $form_state
 */
function acquia_search_multi_subs_environment_edit_form_validate($form, &$form_state) {
  // Only activate if the checkbox has been enabled and there is valid content
  if ($form_state['values']['acquia_override_subscription_id'] == '') {
    form_set_error('acquia_override_subscription_id', t('You must at least fill in a valid Acquia Subscription Identifier.'));
  }
  if ($form_state['values']['acquia_override_subscription_key'] == '') {
    form_set_error('acquia_override_subscription_key', t('You must at least fill in a valid Acquia Subscription key.'));
  }
  if ($form_state['values']['acquia_override_subscription_corename'] == '') {
    $form_state['values']['acquia_override_subscription_corename'] = $form_state['values']['acquia_override_subscription_key'];
  }

  // Set the identifier and key
  $identifier = $form_state['values']['acquia_override_subscription_id'];
  $key = $form_state['values']['acquia_override_subscription_key'];

  $subscription = acquia_agent_get_subscription(array(), $identifier, $key);
  if (is_int($subscription)) {
    form_set_error('acquia_override_subscription_key', t('This combination of ID and key is not valid.'));
  }
}

/**
 * Adds the values to the environment variable array so Acquia Search will work
 *
 * @param type $form
 * @param type $form_state
 */
function acquia_search_multi_subs_environment_edit_form_submit($form, &$form_state) {
  // Only activate if the checkbox has been enabled and there is valid content
  // Add our overrides to the configuration
  $overrive_values = array();
  $override_values['env_id'] = $form['env_id']['#default_value'];
  $override_values['name'] = $form_state['values']['name'];

  if(!empty($form_state['values']['acquia_override_selector'])) {
    // Set the identifier and key
    $identifier = $form_state['values']['acquia_override_subscription_id'];
    $key = $form_state['values']['acquia_override_subscription_key'];
    $corename = $form_state['values']['acquia_override_subscription_corename'];

    // Add our acquia_connection check to this environment
    $form_state['values']['conf']['acquia_override_auto_switch'] = $form_state['values']['acquia_override_auto_switch'];
    $form_state['values']['conf']['acquia_override_selector'] = $form_state['values']['acquia_override_selector'];

    // Save that to our confs per environment, anything outside of conf is
    // ignored as extra value, so adding it to that array so it can be saved
    $form_state['values']['conf']['acquia_override_subscription_id'] = $identifier;
    $form_state['values']['conf']['acquia_override_subscription_key'] = $key;
    $form_state['values']['conf']['acquia_override_subscription_corename'] = $corename;

    // Set the derived key for this environment
    $subscription = acquia_agent_get_subscription(array(), $identifier, $key);
    $derived_key_salt = $subscription['derived_key_salt'];
    $derived_key = _acquia_search_create_derived_key($derived_key_salt, $corename, $key);
    $form_state['values']['conf']['acquia_search_key'] = $derived_key;

    $override_values['acquia_subscription_id'] = $identifier;
    $override_values['acquia_subscription_key'] = $key;
    $override_values['acquia_subscription_corename'] = $corename;

    // merge with our defaults
    $form_state['values'] = array_merge($form_state['values'], acquia_search_get_environment($override_values));

    // Override the URL
    $search_host = variable_get('acquia_search_host', 'search.acquia.com');
    if (!empty($subscription['heartbeat_data']['search_service_colony'])) {
      $search_host = $subscription['heartbeat_data']['search_service_colony'];
    }
    $url = 'http://' . $search_host . variable_get('acquia_search_path', '/solr/'. $corename);
    $form_state['values']['url'] = $url;

    if (empty($form_state['values']['conf']['acquia_override_auto_switch'])) {
      variable_del('apachesolr_environments');
    }
  }
  else {
    // Add our acquia_connection check to this environment
    unset($form_state['values']['conf']['acquia_search_key']);
    unset($form_state['values']['conf']['acquia_subscription_id']);
    unset($form_state['values']['conf']['acquia_subscription_key']);
    apachesolr_environment_variable_del($override_values['env_id'], 'acquia_search_key');
    apachesolr_environment_variable_del($override_values['env_id'], 'acquia_override_subscription_id');
    apachesolr_environment_variable_del($override_values['env_id'], 'acquia_override_subscription_key');
    apachesolr_environment_variable_del($override_values['env_id'], 'acquia_override_subscription_corename');
    $form_state['values'] = array_merge($form_state['values'], acquia_search_get_environment($override_values));
  }
}

/**
 * Alter the environment before it gets saved
 *
 * Implements hook_acquia_search_enable_alter().
 *
 * @param array $environment
 *   The environment that is being enabled by the Acquia Search module.
 */
function acquia_search_multi_subs_acquia_search_enable_alter(&$environment) {
  $corename = apachesolr_environment_variable_get($environment['env_id'], 'acquia_override_subscription_corename');
  $id = apachesolr_environment_variable_get($environment['env_id'], 'acquia_override_subscription_id');
  $key = apachesolr_environment_variable_get($environment['env_id'], 'acquia_override_subscription_key');

  $subscription = acquia_agent_get_subscription($params = array(), $id, $key);
  $search_host = variable_get('acquia_search_host', 'search.acquia.com');
  if (!empty($subscription['heartbeat_data']['search_service_colony'])) {
    $search_host = $subscription['heartbeat_data']['search_service_colony'];
  }
  $url = 'http://' . $search_host . variable_get('acquia_search_path', '/solr/'. $corename);
  $environment['url'] = $url;
}

/**
 * Change the Acquia Search environment on the fly based on the
 * AH_SITE_ENVIRONMENT and AH_SITE_NAME server variable
 *
 * Implements hook_init().
 */
function acquia_search_multi_subs_init() {
  $apachesolr_environments = array();

  // Check if we have the correct environment variables
  if (isset($_ENV['AH_SITE_ENVIRONMENT']) && isset($_ENV['AH_SITE_NAME'])) {
    $ah_site_environment = check_plain($_ENV['AH_SITE_ENVIRONMENT']);
    $ah_site_name = check_plain($_ENV['AH_SITE_NAME']);

    // Replace all weird characters that might appear in the sitegroup name or identifier
    $ah_site_name = preg_replace('@[^a-zA-Z0-9_-]+@','_',$ah_site_name);

    // Load our default environment and see if we should change it
    $env_id = apachesolr_default_environment();
    $environment = apachesolr_environment_load($env_id);

    // Check if the environment we've loaded has Acquia Search and verify if it
    // should be overridden
    $has_auto_switch = (!empty($environment['conf']['acquia_override_auto_switch']) && $environment['conf']['acquia_override_auto_switch'] == 1);

    if ($has_auto_switch) {
      $subscription_id = acquia_agent_settings('acquia_identifier');
      $key = acquia_agent_settings('acquia_key');

      // Generate our expected core name according to Acquia Search
      // conventions
      if ($ah_site_environment == 'prod') {
        $expected_core_name = $subscription_id;
      }
      else {
        $expected_core_name = $subscription_id . '_' . $ah_site_name;
      }

      // We know we have to switch automatically so we check if our core name
      // that is currently set is correct. If not, we change it and rebuild
      // our system.
      $environment_core_name = (isset($environment['conf']['acquia_override_subscription_corename']) ? $environment['conf']['acquia_override_subscription_corename'] :'' );
      if ($expected_core_name != $environment_core_name) {
        // check if we have a core available that fits our needs
        $search_cores = acquia_search_multi_subs_get_search_cores();
        foreach ($search_cores as $search_core) {
          if ($search_core['core_id'] == $expected_core_name) {

            // Get the derived key salt from the subscription
            $subscription = acquia_agent_settings('acquia_subscription_data');
            $derived_key_salt = $subscription['derived_key_salt'];
            // Create our derived key
            $derived_key = _acquia_search_create_derived_key($derived_key_salt, $expected_core_name, $key);

            // Set our variables in the subscription array
            $apachesolr_environments[$env_id]['conf']['acquia_override_subscription_corename'] = $expected_core_name;
            $apachesolr_environments[$env_id]['conf']['acquia_search_key'] = $derived_key;
            $apachesolr_environments[$env_id]['conf']['acquia_override_selector'] = $expected_core_name;
            // Generate the url where this core should connect to
            $url = 'http://' . $search_core['balancer'] . variable_get('acquia_search_path', '/solr/'. $expected_core_name);
            $apachesolr_environments[$env_id]['url'] = $url;
            // Set our variable, needs two page loads to make sure it is in the
            // system. Setting the global conf variable is not valid as some
            // calls to apachesolr_load_all_environments happen too early in
            // the process. If we set the variable, we are sure it is there in
            // the next page load. Also, setting this variable only happens when
            // the environment changes and another environment which fits is
            // found.
            variable_set('apachesolr_environments', $apachesolr_environments);
            drupal_static_reset('apachesolr_load_all_environments');
            // Enough calculations, exit the foreach
            break;
          }
        }
      }
    }
  }
}

/**
 * Get all the available search cores if its been set in the subscription.
 *
 * @return array $search_cores
 *   The search cores that are available according to the information in the
 *   rpc backend.
 */
function acquia_search_multi_subs_get_search_cores() {
  $search_cores = array();
  $subscription = acquia_agent_settings('acquia_subscription_data');
  // Get our search cores if they exist
  if (isset($subscription['heartbeat_data']['search_cores'])) {
    $search_cores = $subscription['heartbeat_data']['search_cores'];
  }
  return $search_cores;
}
